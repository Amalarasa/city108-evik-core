import os
import re
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from supabase import create_client

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

SESSION_TIMEOUT = 600  # 10 –º–∏–Ω—É—Ç
user_last_active = {}
duty_moderators = set()

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
def extract_name(text):
    patterns = [
        r"(?:–º–µ–Ω—è –∑–æ–≤—É—Ç|–º–µ–Ω—è –∑–≤–∞—Ç—å|–º–æ[–µ—ë] –∏–º—è|—è|–∑–æ–≤–∏ –º–µ–Ω—è|–Ω–∞–∑—ã–≤–∞–π –º–µ–Ω—è)[\s:]+([–ê-–Ø–∞-—èA-Za-z\-]+)",
        r"^([–ê-–Ø–∞-—èA-Za-z\-]{3,})$"
    ]
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return match.group(1).strip().capitalize()
    return text.strip().split()[0].capitalize()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ START
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "start":
        user = query.from_user
        telegram_id = user.id
        full_name = user.full_name
        user_last_active[telegram_id] = datetime.utcnow()

        result = supabase.table("guests").select("*").eq("id_telegram", telegram_id).execute()
        if result.data:
            await context.bot.send_message(chat_id=query.message.chat_id, text="–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ City_108.")
        else:
            guest_insert = supabase.table("guests").insert({
                "id_telegram": telegram_id,
                "temp_name": full_name,
                "preferred_form": full_name,
                "language": user.language_code or "unknown",
                "region": "unknown",
                "source": "unknown",
                "interests": [],
                "skills": [],
                "status": "guest",
                "created_at": datetime.utcnow().isoformat(),
                "last_active": datetime.utcnow().isoformat(),
                "return_count": 1,
                "is_complete": False,
                "verified_by_moderator": False,
                "waits_for_moderator_reply": False
            }).execute()

            new_guest_id = guest_insert.data[0]['id']
            supabase.table("guest_profiles").insert({"guest_id": new_guest_id}).execute()
            supabase.table("guest_analytics").insert({"guest_id": new_guest_id}).execute()

            await context.bot.send_message(chat_id=query.message.chat_id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ City_108! –†–∞–¥ –≤—Å—Ç—Ä–µ—á–µ. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    telegram_id = user.id
    full_name = user.full_name
    user_last_active[telegram_id] = datetime.utcnow()

    result = supabase.table("guests").select("*").eq("id_telegram", telegram_id).execute()

    if result.data:
        guest = result.data[0]
        await update.effective_chat.send_message(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {guest['preferred_form']}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞ –≤ City_108.")
        supabase.table("guests").update({
            "last_active": datetime.utcnow().isoformat(),
            "return_count": guest.get("return_count", 0) + 1
        }).eq("id_telegram", telegram_id).execute()
    else:
        keyboard = [[InlineKeyboardButton("üöÄ START", callback_data="start")]]
        await update.effective_chat.send_message(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ City_108! –Ø ‚Äî –≠–≤–∏–∫, –º—ç—Ä —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# –ö–æ–º–∞–Ω–¥–∞ /reset
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    supabase.table("guests").delete().eq("id_telegram", telegram_id).execute()
    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É START.",
                                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("START", callback_data="start")]]))

# –ö–æ–º–∞–Ω–¥–∞ /duty
async def duty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    moderator_id = update.effective_user.id
    duty_moderators.add(moderator_id)
    await update.message.reply_text("–¢—ã –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–µ–∂—É—Ä–Ω—ã–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º. –û–∂–∏–¥–∞–π —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–æ–≤—ã—Ö –≥–æ—Å—Ç–µ–π!")

# –ö–æ–º–∞–Ω–¥–∞ /verify
async def verify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    supabase.table("guests").update({"verified_by_moderator": True}).eq("id_telegram", telegram_id).execute()
    await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")

# –ö–æ–º–∞–Ω–¥–∞ /profile
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    result = supabase.table("guests").select("*").eq("id_telegram", telegram_id).execute()
    if result.data:
        guest = result.data[0]
        await update.message.reply_text(f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: \n–ò–º—è: {guest['preferred_form']}\n–Ø–∑—ã–∫: {guest['language']}\n–†–µ–≥–∏–æ–Ω: {guest['region']}\n–ù–∞–≤—ã–∫–∏: {guest['skills']}\n–ò–Ω—Ç–µ—Ä–µ—Å—ã: {guest['interests']}")
    else:
        await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏ START –¥–ª—è –Ω–∞—á–∞–ª–∞.",
                                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("START", callback_data="start")]]))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    telegram_id = user.id
    text = update.message.text.strip()

    now = datetime.utcnow()
    if telegram_id in user_last_active and now - user_last_active[telegram_id] > timedelta(seconds=SESSION_TIMEOUT):
        keyboard = [[InlineKeyboardButton("üîÑ START", callback_data="start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:", reply_markup=reply_markup)
        return
    user_last_active[telegram_id] = now

    result = supabase.table("guests").select("*").eq("id_telegram", telegram_id).execute()
    if not result.data:
        keyboard = [[InlineKeyboardButton("START", callback_data="start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:", reply_markup=reply_markup)
        return

    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –≥–æ—Å—Ç–µ–º: –ª–æ–≥–∏–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Ç.–ø.
    if text.lower() in ["–¥–∞", "–¥–∞, –º–æ–∂–Ω–æ", "–¥–∞, –∫–æ–Ω–µ—á–Ω–æ", "–¥–∞, —è –Ω–µ –ø—Ä–æ—Ç–∏–≤"]:
        if duty_moderators:
            moderator_id = list(duty_moderators)[0]
            await context.bot.send_message(moderator_id, f"üîî –ù–æ–≤—ã–π –≥–æ—Å—Ç—å: {user.full_name} (ID: {telegram_id}) —Ö–æ—á–µ—Ç –ø–æ–æ–±—â–∞—Ç—å—Å—è –ª–∏—á–Ω–æ!")
            await update.message.reply_text("–Ø —Å–æ–æ–±—â–∏–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π —Å–≤—è–∑–∏ üë®‚Äçüíª")
        else:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–µ–∂—É—Ä–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤. –ù–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∑–¥–µ—Å—å.")

if __name__ == '__main__':
    app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("duty", duty))
    app.add_handler(CommandHandler("verify", verify))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling()
