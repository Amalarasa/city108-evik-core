import os
import re
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from supabase import create_client

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

SESSION_TIMEOUT = 600  # 10 –º–∏–Ω—É—Ç

user_last_active = {}  # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–æ—Å—Ç–æ—è

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
def extract_name(text):
    patterns = [
        r"(?:–º–µ–Ω—è –∑–æ–≤—É—Ç|–º–µ–Ω—è –∑–≤–∞—Ç—å|–º–æ[–µ—ë] –∏–º—è|—è|–∑–æ–≤–∏ –º–µ–Ω—è|–Ω–∞–∑—ã–≤–∞–π –º–µ–Ω—è)[\s:]+([–ê-–Ø–∞-—èA-Za-z\-]+)",
        r"^([–ê-–Ø–∞-—èA-Za-z\-]{3,})$"
    ]
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return match.group(1).strip().capitalize()
    return text.strip().split()[0].capitalize()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    telegram_id = user.id
    full_name = user.full_name
    user_last_active[telegram_id] = datetime.utcnow()

    result = supabase.table("guests").select("*").eq("id_telegram", telegram_id).execute()

    if result.data:
        guest = result.data[0]
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {guest['preferred_form']}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞ –≤ City_108."
        )
        supabase.table("guests").update({
            "last_active": datetime.utcnow().isoformat(),
            "return_count": guest.get("return_count", 0) + 1
        }).eq("id_telegram", telegram_id).execute()
    else:
        guest_insert = supabase.table("guests").insert({
            "id_telegram": telegram_id,
            "temp_name": full_name,
            "preferred_form": full_name,
            "language": user.language_code or "unknown",
            "region": "unknown",
            "source": "unknown",
            "interests": [],
            "skills": [],
            "status": "guest",
            "created_at": datetime.utcnow().isoformat(),
            "last_active": datetime.utcnow().isoformat(),
            "return_count": 1,
            "is_complete": False,
            "verified_by_moderator": False,
            "waits_for_moderator_reply": False
        }).execute()

        new_guest_id = guest_insert.data[0]['id']
        supabase.table("guest_profiles").insert({"guest_id": new_guest_id}).execute()
        supabase.table("guest_analytics").insert({"guest_id": new_guest_id}).execute()

        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ City_108! –Ø ‚Äî –≠–≤–∏–∫, –º—ç—Ä —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ö–∞–∫ –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
        )

# –ö–æ–º–∞–Ω–¥–∞ /reset
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    supabase.table("guests").delete().eq("id_telegram", telegram_id).execute()
    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /duty
async def duty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    name = update.effective_user.full_name
    supabase.table("moderators_on_duty").upsert({
        "telegram_id": telegram_id,
        "name": name,
        "on_duty_since": datetime.utcnow().isoformat()
    }, on_conflict=["telegram_id"]).execute()
    await update.message.reply_text("–¢—ã –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–µ–∂—É—Ä–Ω—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –Ø –±—É–¥—É –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –∑–∞–ø—Ä–æ—Å—ã –≥–æ—Å—Ç–µ–π.")

# –ö–æ–º–∞–Ω–¥–∞ /profile
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    result = supabase.table("guests").select("*").eq("id_telegram", telegram_id).execute()
    if not result.data:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return

    guest = result.data[0]
    await update.message.reply_text(
        f"–ò–º—è: {guest['preferred_form']}\n"
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: {guest['source']}\n"
        f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(guest['interests']) if guest['interests'] else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"–ù–∞–≤—ã–∫–∏: {', '.join(guest['skills']) if guest['skills'] else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"–°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {'–∑–∞–≤–µ—Ä—à–µ–Ω–∞' if guest['is_complete'] else '–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}"
    )

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–∂—É—Ä–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
async def notify_moderators(context, guest):
    moderators = supabase.table("moderators_on_duty").select("*").execute().data
    if not moderators:
        return
    text = (
        f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º:\n\n"
        f"–ò–º—è: {guest['preferred_form']}\n"
        f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(guest['interests'])}\n"
        f"–ù–∞–≤—ã–∫–∏: {', '.join(guest['skills'])}\n"
        f"Telegram ID: {guest['id_telegram']}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: /verify {guest['id_telegram']}"
    )
    for mod in moderators:
        try:
            await context.bot.send_message(chat_id=mod['telegram_id'], text=text)
        except:
            continue

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    telegram_id = user.id
    text = update.message.text.strip()

    now = datetime.utcnow()
    if telegram_id in user_last_active and now - user_last_active[telegram_id] > timedelta(seconds=SESSION_TIMEOUT):
        keyboard = [[InlineKeyboardButton("üîÑ START", callback_data="start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞:", reply_markup=reply_markup)
        return
    user_last_active[telegram_id] = now

    result = supabase.table("guests").select("*").eq("id_telegram", telegram_id).execute()
    if not result.data:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    guest = result.data[0]
    guest_id = guest['id']
    supabase.table("messages_log").insert({
        "guest_id": guest_id,
        "message_text": text,
        "timestamp": now.isoformat()
    }).execute()

    if guest.get("waits_for_moderator_reply"):
        if text.lower() in ["–¥–∞", "yes", "—Ö–æ—á—É"]:
            supabase.table("guests").update({"waits_for_moderator_reply": False}).eq("id_telegram", telegram_id).execute()
            await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–µ—Ä–µ–¥–∞–º —Ç–≤–æ—ë –∂–µ–ª–∞–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.")
            await notify_moderators(context, guest)
        elif text.lower() in ["–Ω–µ—Ç", "–Ω–µ —Ö–æ—á—É"]:
            supabase.table("guests").update({"waits_for_moderator_reply": False}).eq("id_telegram", telegram_id).execute()
            await update.message.reply_text("–ü–æ–Ω—è–ª. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏.")
        else:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª, —á—Ç–æ–±—ã —è –ø–æ–Ω—è–ª —Ç–≤–æ–π –æ—Ç–≤–µ—Ç.")
        return

    if not guest.get("preferred_form") or guest["preferred_form"] == guest["temp_name"]:
        name = extract_name(text)
        supabase.table("guests").update({"preferred_form": name}).eq("id_telegram", telegram_id).execute()
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ. –°–∫–∞–∂–∏, –æ—Ç–∫—É–¥–∞ —Ç—ã —É–∑–Ω–∞–ª –æ –Ω–∞—à–µ–º –≥–æ—Ä–æ–¥–µ?")
    elif not guest.get("source") or guest["source"] == "unknown":
        supabase.table("guests").update({"source": text}).eq("id_telegram", telegram_id).execute()
        await update.message.reply_text("–ê —á—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–æ –ø—Ä–∏–π—Ç–∏ –≤ City_108? –ß–µ–º –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –∑–∞–Ω—è—Ç—å—Å—è?")
    elif not guest.get("interests"):
        interests = [i.strip() for i in text.split(',') if i.strip()]
        supabase.table("guests").update({"interests": interests}).eq("id_telegram", telegram_id).execute()
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ê –∫–∞–∫–∏–µ —É —Ç–µ–±—è –µ—Å—Ç—å –Ω–∞–≤—ã–∫–∏?")
    elif not guest.get("skills"):
        skills = [i.strip() for i in text.split(',') if i.strip()]
        supabase.table("guests").update({"skills": skills, "is_complete": True, "waits_for_moderator_reply": True}).eq("id_telegram", telegram_id).execute()
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ–µ–∫—Ç. –•–æ—á–µ—à—å –ª–∏ —Ç—ã –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º?")
    else:
        await update.message.reply_text("City_108 –æ—Ç–∫—Ä—ã—Ç –¥–ª—è —Ç–µ–±—è. –ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏!")
    supabase.table("guests").update({"last_active": now.isoformat()}).eq("id_telegram", telegram_id).execute()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π /verify
async def verify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await update.message.reply_text("–£–∫–∞–∂–∏ telegram_id —É—á–∞—Å—Ç–Ω–∏–∫–∞. –ü—Ä–∏–º–µ—Ä: /verify 123456789")
        return
    try:
        target_id = int(args[0])
        result = supabase.table("guests").select("*").eq("id_telegram", target_id).execute()
        if result.data:
            supabase.table("guests").update({"verified_by_moderator": True}).eq("id_telegram", target_id).execute()
            await update.message.reply_text(f"–£—á–∞—Å—Ç–Ω–∏–∫ —Å id {target_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
        else:
            await update.message.reply_text("–¢–∞–∫–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç id. –£–∫–∞–∂–∏ —á–∏—Å–ª–æ–≤–æ–π telegram_id.")

if __name__ == '__main__':
    app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("duty", duty))
    app.add_handler(CommandHandler("verify", verify))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
